const { createServer } = require('https');
const { parse } = require('url');
const next = require('next');
const fs = require('fs');
const path = require('path');
const os = require('os');

const dev = process.env.NODE_ENV !== 'production';
const hostname = 'localhost';
const port = 3000;

const app = next({ dev, hostname, port });
const handle = app.getRequestHandler();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
function getLocalIpAddress() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (localhost) –∏ –Ω–µ IPv4 –∞–¥—Ä–µ—Å–∞
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  return '–Ω–µ –Ω–∞–π–¥–µ–Ω';
}

const httpsOptions = {
  key: fs.readFileSync(path.join(__dirname, 'certificates', 'localhost-key.pem')),
  cert: fs.readFileSync(path.join(__dirname, 'certificates', 'localhost.pem')),
};

app.prepare().then(() => {
  createServer(httpsOptions, async (req, res) => {
    try {
      const parsedUrl = parse(req.url, true);
      await handle(req, res, parsedUrl);
    } catch (err) {
      console.error('Error occurred handling', req.url, err);
      res.statusCode = 500;
      res.end('internal server error');
    }
  })
    .once('error', (err) => {
      console.error(err);
      process.exit(1);
    })
    .listen(port, () => {
      const localIp = getLocalIpAddress();
      console.log(`\n‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n`);
      console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:  https://${hostname}:${port}`);
      console.log(`üì± –î–æ—Å—Ç—É–ø —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞: https://${localIp}:${port}\n`);
      console.log(`‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n`);
    });
});

